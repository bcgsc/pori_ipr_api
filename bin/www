/**
 * Module dependencies.
 */
const minimist = require('minimist');
const debug = require('debug')('ipr-api:server');
const http = require('http');
const https = require('https');
const fs = require('fs');
require('colors'); // Console colours

// Set environment based on config first.
if (process.env.NODE_ENV === undefined || process.env.NODE_ENV === null) {
    // Get from command line args
    const args = minimist(process.argv.slice(2));
    if (args.env) process.env.NODE_ENV = args.env;
    if (!args.env) process.env.NODE_ENV = 'production';
}

const envConf = require(`../config/${process.env.NODE_ENV.toLowerCase()}.json`);
const API_VERSION = '1.0';

/**
 * Normalize a port into a number, string, or false.
 * @param {number|string} val value to parse
 * @returns {number|string|boolean} the parsed value
 */
function normalizePort(val) {
    const normPort = parseInt(val, 10); // parse val as int with base 10

    if (Number.isNaN(Number(normPort))) {
        // named pipe
        return val;
    }

    if (normPort >= 0) {
        // port number
        return normPort;
    }

    return false;
}

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort((envConf.web.port || process.env.PORT) || '8081');

// Start Server
console.log((`BCGSC - IPR-API Server ${API_VERSION}  `).blue.bold.bgWhite);
console.log('='.repeat(50).dim);
console.log((`Node Version: ${process.version}`).yellow);
console.log((`Running Environment: ${process.env.NODE_ENV}`).green, '\n');
console.log(('Application API Port: ').green, port.toString().white);

// Import Namespaces
const App = require('../app');

App().then((app) => {
    app.set('port', port);
    let server;

    const onListening = () => {
        const addr = server.address();
        const bind = typeof addr === 'string'
            ? `pipe ${addr}`
            : `port ${addr.port}`;
        debug(`Listening on ${bind}`);
    };

    const onError = (error) => {
        if (error.syscall !== 'listen') {
            throw error;
        }

        const bind = typeof port === 'string'
            ? `Pipe ${port}`
            : `Port ${port}`;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(`${bind} requires elevated privileges`);
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(`${bind} is already in use`);
                process.exit(1);
                break;
            default:
                throw error;
        }
    };

    // Creating HTTP(S) Server
    // Don't use HTTPS for local instances
    if (process.env.NODE_ENV.toLowerCase() === 'local') {
        /**
        * Create HTTP server if local instance
        */
        server = http.createServer(app);
    } else {
        /**
        * Create HTTPS server if not local instance
        */
        const certificate = fs.readFileSync(envConf.web.ssl);
        server = https.createServer({key: certificate, cert: certificate}, app);
    }

    /**
    * Socket.io
    */
    const io = app.io;
    io.attach(server);

    /**
    * Listen on provided port, on all network interfaces.
    */
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
});
