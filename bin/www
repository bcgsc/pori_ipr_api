#!~/apps/node-v6.10.3-linux-x64/bin/node

/**
 * Module dependencies.
 */

let debug       = require('debug')('ipr-api:server');
let http        = require('http');
let colors      = require('colors');        // Console colours
let nconf       = require('nconf').argv().env().file({file: './config/config.json'});

let envConf     = require("../config/" + process.env.NODE_ENV.toLowerCase() + ".json");

console.log(envConf.web.port);


const API_VERSION = '1.0';

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort((envConf.web.port || process.env.PORT) || '8081');

/**
 * Get admin port from environment and store in Express
 */
let admin_port = normalizePort((envConf.web.admin_port || process.env.ADMIN_PORT) || '8082');

// Start Server
console.log(('  BCGSC - IPR-API Server '+ API_VERSION +'  ').blue.bold.bgWhite);
console.log("=".repeat(50).dim);
console.log(("Node Version: " + process.version).yellow);
console.log(('Running Environment: '+ process.env.NODE_ENV).green, '\n');
console.log(('Application API Port: ').green,  port.toString().white);
console.log(('Admin API Port: ').green, admin_port.toString().white, '\n');


// Import Namespaces
let admin = require('../admin');
let app = require('../app');

app.set('port', port);
admin.set('port', admin_port);


/**
 * Create HTTP server.
 */

let server = http.createServer(app);
let admin_server = http.createServer(admin);

/**
 * Socket.io
 */

let io     = app.io;
io.attach(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

admin_server.listen(admin_port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
