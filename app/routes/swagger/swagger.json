{
  "openapi": "3.0.0",
  "info": {
    "description": "Designed to be consumed by the Integrated Pipeline Reports (IPR) Client, the endpoints are\navailable for authorized users to consume.",
    "version": "1.0.0",
    "title": "Integrated Pipeline Reports (IPR)",
    "contact": {
      "name": "IPR Team",
      "email": "ipr@bcgsc.ca"
    },
    "license": {
      "name": "Proprietary"
    }
  },
  "paths": {
    "/user": {
      "get": {
        "summary": "Get all users",
        "description": "If your account has permissions, this will return all detailed user\nobject descriptions in the database.",
        "tags": [
          "User"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "For those authorized, returns all available users in the database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/userAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Denied access to list of all users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ACLDenied"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Authorize new account",
        "description": "Authorize a new user to access IPR. Field 'type' should be equal 'local' or 'bcgsc'.",
        "tags": [
          "User"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User has been successfully added to the system",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userAssociations"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input was provided"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Insufficient access to authorize new accounts"
          },
          "409": {
            "description": "Username is already being used"
          }
        }
      }
    },
    "/user/{user}": {
      "put": {
        "summary": "Update a user account",
        "description": "Update the user specified user details",
        "tags": [
          "User"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "description": "User's UUID string",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User account was updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Remove a single user",
        "description": "Delete a user's access to the API. This does not remove the record from\nthe dataStore the user is located in.",
        "tags": [
          "User"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "description": "User's UUID string",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user has been successfully removed"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Insufficient access to remove the user"
          },
          "404": {
            "description": "Unable to find the requested user"
          }
        }
      }
    },
    "/user/me": {
      "get": {
        "summary": "Return self",
        "description": "Return the current authenticated user",
        "tags": [
          "User"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the current authenticated self",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "No authenticated user available."
          }
        }
      }
    },
    "/user/settings": {
      "get": {
        "summary": "Return user settings",
        "description": "Return the current authenticated user's settings",
        "tags": [
          "User"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns settings for the current user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "No settings available for the current authenticated user."
          }
        }
      },
      "put": {
        "summary": "Update a users settings",
        "description": "Update settings for a specific user",
        "tags": [
          "User"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "requestBody": {
          "description": "The updated user settings to be stored in the database.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User settings was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/user/search": {
      "get": {
        "summary": "User Search",
        "description": "Provided some input query, search the user database and return results.\nQuery is search against first name, last name, email, and username.",
        "tags": [
          "User"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": true,
            "description": "String to search user database against. Wildcard matching on either\nside of string",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully searched user database against the provided query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/userAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/user/group": {
      "get": {
        "summary": "Get all groups",
        "description": "Return all groups currently listed in the report ACL database. This is\nnot linked or connected to the BCGSC LDAP database. Changes in one do\nnot affect the other.",
        "tags": [
          "Group"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "The API will return all available groups it has on record.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/userGroupAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "You are not authorized to view this resource"
          }
        }
      },
      "post": {
        "summary": "Create new group",
        "description": "Create a new ACL group in the Report API",
        "tags": [
          "Group"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the new group",
                    "type": "string"
                  },
                  "owner": {
                    "description": "UUID of the owner of the new group",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "owner"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group successfully added to database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userGroupAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "You are not allowed to create new group entries."
          }
        }
      }
    },
    "/user/group/{group}": {
      "get": {
        "summary": "Get a group",
        "description": "Get detailed group object from ident.",
        "tags": [
          "Group"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "description": "Group UUID string",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group found, API will return the detailed group object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userGroupAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "You are not authorized to view the resource"
          }
        }
      },
      "put": {
        "summary": "Update a group",
        "description": "Update the groups definition in the IPR API database",
        "tags": [
          "Group"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "description": "Group UUID string",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the new group",
                    "type": "string"
                  },
                  "owner": {
                    "description": "UUID of the owner of the new group",
                    "type": "string"
                  },
                  "required": [
                    "name",
                    "owner"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userGroupAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "You are not authorized to perform this action"
          },
          "404": {
            "description": "Unable to find the group"
          }
        }
      },
      "delete": {
        "summary": "Remove a group",
        "description": "Remove a group entry from the database. Doing this will immediately\nrevoke group member's access to defined resources.",
        "tags": [
          "Group"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "description": "Group UUID string",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The group was successfully removed"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "You are not authorized to perform this action"
          },
          "404": {
            "description": "Unable to find the group or user"
          }
        }
      }
    },
    "/user/group/{group}/member": {
      "get": {
        "summary": "Get group members",
        "description": "Get detailed description of all group members.",
        "tags": [
          "Group"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "description": "Group UUID string",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved all group members.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "You are not authorized to view group members"
          },
          "404": {
            "description": "Unable to find the group or user"
          }
        }
      },
      "post": {
        "summary": "Add group member",
        "description": "Add an existing user as a member to the specified group",
        "tags": [
          "Group"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "description": "Group UUID string",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "type": "string",
                    "description": "UUID ident string belonging to the user",
                    "example": "8cd64045-7e68-4455-bcc2-e750c4372974"
                  }
                },
                "required": [
                  "user"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user was successfully added to the group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "You are not authorized to perform this action"
          },
          "404": {
            "description": "Unable to find the group or user"
          }
        }
      },
      "delete": {
        "summary": "Remove group member",
        "description": "Remove an existing user from a group of which they are a member",
        "tags": [
          "Group"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "description": "Group UUID string",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "type": "string",
                    "description": "UUID ident string belonging to the user",
                    "example": "8cd64045-7e68-4455-bcc2-e750c4372974"
                  }
                },
                "required": [
                  "user"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The user was successfully removed from the group."
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "You are not authorized to perform this action"
          },
          "404": {
            "description": "Unable to find the group or user"
          }
        }
      }
    },
    "/reports/{report}/patient-information": {
      "get": {
        "summary": "Get Patient Information",
        "description": "Retrieve patient information for a given report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Patient Information"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an object containing patient information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/patientInformationAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or patient information not found"
          }
        }
      },
      "put": {
        "summary": "Update Patient Information",
        "description": "Update the patient information for a report",
        "tags": [
          "Patient Information"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patientInformationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated patient information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/patientInformationAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or patient information not found"
          }
        }
      }
    },
    "/reports/{report}/mutation-burden": {
      "get": {
        "summary": "Get Mutation Burden",
        "description": "Retrieve mutation burden details for a given report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Mutation Burden"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of all mutation burdens for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/mutationBurdenAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report Not found"
          }
        }
      },
      "post": {
        "summary": "Create Mutation Burden",
        "description": "Add a new mutation burden to this report",
        "tags": [
          "Mutation Burden"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/mutationBurdenCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created mutation burden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mutationBurdenAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report Not found"
          }
        }
      }
    },
    "/reports/{report}/mutation-burden/{burden}": {
      "get": {
        "summary": "Get Mutation Burden By Ident",
        "description": "Retrieve a specific mutation burden from the report by ident",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/burden"
          }
        ],
        "tags": [
          "Mutation Burden"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the specified mutation burden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mutationBurdenAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or mutation burden not found"
          }
        }
      },
      "put": {
        "summary": "Update Mutation Burden",
        "description": "Update the details of a specific mutation burden",
        "tags": [
          "Mutation Burden"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/burden"
          }
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/mutationBurdenUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the details of the updated mutation burden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mutationBurdenAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or mutation burden not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Mutation Burden by Ident",
        "description": "Removes the specified mutation burden",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/burden"
          }
        ],
        "tags": [
          "Mutation Burden"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or mutation burden not found"
          }
        }
      }
    },
    "/reports/{report}/tmbur-mutation-burden": {
      "get": {
        "summary": "Get Tmbur Mutation Burden",
        "description": "Retrieve tmbur mutation burden details for a given report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Tmbur Mutation Burden"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the tmbur mutation burden for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tmburMutationBurdenAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report Not found"
          }
        }
      },
      "post": {
        "summary": "Create Tmbur Mutation Burden",
        "description": "Add a new tmbur mutation burden to this report",
        "tags": [
          "Tmbur Mutation Burden"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tmburMutationBurdenCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created tmbur mutation burden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tmburMutationBurdenAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report Not found"
          }
        }
      },
      "put": {
        "summary": "Update Tmbur Mutation Burden",
        "description": "Update the details of a specific tmbur mutation burden",
        "tags": [
          "Tmbur Mutation Burden"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tmburMutationBurdenUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the details of the updated tmbur mutation burden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tmburMutationBurdenAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or tmbur mutation burden not found"
          }
        }
      }
    },
    "/reports/{report}/summary/variant-counts": {
      "get": {
        "summary": "Get Variant Count",
        "description": "Retrieve the variant count for a given report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Variant Count"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns variant count details for a report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/variantCountsAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or variant count not found"
          }
        }
      },
      "put": {
        "summary": "Update Variant Count",
        "description": "Update the variant count for a report",
        "tags": [
          "Variant Count"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/variantCountsUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated variant count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/variantCountsAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or variant count not found"
          }
        }
      }
    },
    "/reports/{report}/summary/genomic-alterations-identified": {
      "get": {
        "summary": "Get Genomic Alterations Identified",
        "description": "Retrieve all genomic alterations identified for a given report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Genomic Alterations Identified"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of genomic alterations identified for a report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/genomicAlterationsIdentifiedAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      },
      "post": {
        "summary": "Create Genomic Alterations Identified",
        "description": "Add a new genomic alterations identified",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Genomic Alterations Identified"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "requestBody": {
          "description": "Genomic alterations data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/genomicAlterationsIdentifiedCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns newly created genomic alteration identified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genomicAlterationsIdentifiedAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "User is not authorized to add key genomic alterations"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/summary/genomic-alterations-identified/{alteration}": {
      "get": {
        "summary": "Get Genomic Alterations Identified",
        "description": "Retrieves a specific identified genomic alteration",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/alteration"
          }
        ],
        "tags": [
          "Genomic Alterations Identified"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the specified genomic alterations identified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genomicAlterationsIdentifiedAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or genomic alterations identified not found"
          }
        }
      },
      "put": {
        "summary": "Update Genomic Alterations Identified",
        "description": "Update the details of a genomic alterations identified",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/alteration"
          }
        ],
        "requestBody": {
          "description": "New values to update specified genomic alterations identified",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/genomicAlterationsIdentifiedUpdate"
              }
            }
          }
        },
        "tags": [
          "Genomic Alterations Identified"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated genomic alterations identified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genomicAlterationsIdentifiedAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or genomic alterations identified not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Genomic Alterations Identified",
        "description": "Remove an identified genomic alteration",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/alteration"
          }
        ],
        "tags": [
          "Genomic Alterations Identified"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or genomic alterations identified not found"
          }
        }
      }
    },
    "/reports": {
      "get": {
        "summary": "Get Genomic Reports",
        "description": "Retrieve all genomic reports that you have acess to",
        "tags": [
          "Reports"
        ],
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "required": false,
            "description": "Seach for all reports under a chosen project name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchText",
            "in": "query",
            "required": false,
            "description": "String to be searched in the reports field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keyVariant",
            "in": "query",
            "required": false,
            "description": "String to be searched in the Key Genomic and Transcriptomic Alterations Identified variants",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "states",
            "in": "query",
            "required": false,
            "description": "Filter by current state of the report",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "description": "Filter the reports by user role",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paginated",
            "in": "query",
            "required": false,
            "description": "'true', if you want to split the report, allowing you to choose the 'limit' and 'offset",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "The number of reports to retrieve",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "The start of the set of reports to retrieve",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Column(s) for the reports to be sorted on",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an object with the number of reports and an array of genomic reports",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer"
                    },
                    "reports": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/reportAssociations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Insufficient access to get reports"
          }
        }
      },
      "post": {
        "summary": "Add Genomic Report",
        "description": "Upload a genomic report and all of the report sections",
        "tags": [
          "Reports"
        ],
        "parameters": [],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reportCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns an object containing a message and the ident of the new report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "ident": {
                      "$ref": "#/components/schemas/ident"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Malformed request syntax"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/reports/{report}": {
      "get": {
        "summary": "Get Genomic Report",
        "description": "Retrieve a specific genomic report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Reports"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the specified genomic report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reportAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      },
      "put": {
        "summary": "Update Genomic Report",
        "description": "Update the details of a genomic report",
        "tags": [
          "Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reportUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the details of the updated genomic report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reportAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Genomic Report",
        "description": "Removes the specified genomic report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Reports"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports-async": {
      "post": {
        "summary": "Add Genomic Report (Async)",
        "description": "Upload a genomic report and all of the report sections (async)",
        "tags": [
          "Reports Async"
        ],
        "parameters": [],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reportCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns an object containing a message and the ident of the new report, or the ident to check the report status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "ident": {
                      "$ref": "#/components/schemas/ident"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Malformed request syntax"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/reports-async/{report}": {
      "get": {
        "summary": "Get Genomic Report (Async)",
        "description": "Retrieve a specific genomic report (Async)",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Reports Async"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the specified genomic report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reportAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/user": {
      "get": {
        "summary": "Get Report Users",
        "description": "Retrieve all users bound to a report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Report Users"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of all the users bound to a report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/reportUserAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      },
      "post": {
        "summary": "Create Report-User Binding",
        "description": "Bind a user to a report",
        "tags": [
          "Report Users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "requestBody": {
          "description": "Values for binding a user to a report",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reportUserCreate"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the report with the user now bound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reportAssociations"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request syntax"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or user not found"
          },
          "409": {
            "description": "User already bound to report"
          }
        }
      }
    },
    "/reports/{report}/user/{binding}": {
      "get": {
        "summary": "Get Report-User Binding",
        "description": "Retrieve a specific report-user binding",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/reportUser"
          }
        ],
        "tags": [
          "Report Users"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the specified report-user binding",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reportUserAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or report-user binding not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Report-User Binding",
        "description": "Removes a report-user binding",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/reportUser"
          }
        ],
        "tags": [
          "Report Users"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or report-user binding not found"
          }
        }
      }
    },
    "/reports/{report}/summary/microbial": {
      "get": {
        "summary": "Get microbial data",
        "description": "Get microbial data for a specific report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Microbial"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an object of microbial data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/microbialAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/project": {
      "get": {
        "summary": "Get all projects",
        "description": "Returns all projects that the user has access to",
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Get all projects that the user has access to",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/project"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "User doesn't have access to projects"
          }
        }
      },
      "post": {
        "summary": "Add new project",
        "description": "Add a new project to the list of projects",
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A project was successfully added or successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "User isn't allowed to add a project"
          }
        }
      }
    },
    "/project/{project}/reports": {
      "get": {
        "summary": "Get Genomic Reports associated with a project",
        "description": "Retrieve all genomic reports that you have acess to",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of all reports in a specified project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/projectReports"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Insufficient access to get reports"
          }
        }
      }
    },
    "/project/{project}/therapeutic-targets": {
      "get": {
        "summary": "Get All Therapeutic Targets For a Project",
        "description": "Returns all therapeutic targets for a project that the user has access to",
        "tags": [
          "Project Therapeutic Targets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all the therapeutic targets for a project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer"
                    },
                    "rows": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/therapeuticTargetAssociations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "User does not have access to this project"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/reports/{report}/therapeutic-targets": {
      "get": {
        "summary": "Get Therapeutic Targets",
        "description": "Retrieve all therapeutic targets for a given report",
        "tags": [
          "Therapeutic Targets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of therapeutic targets for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/therapeuticTargetAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Don't have permissions to get therapeutic targets"
          },
          "404": {
            "description": "Report not found"
          }
        }
      },
      "post": {
        "summary": "Create Therapeutic Target",
        "description": "Add a new therapeutic target to this report",
        "tags": [
          "Therapeutic Targets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "requestBody": {
          "description": "Values for creating a new therapeutic target",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/therapeuticTargetCreate"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created therapeutic target",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/therapeuticTargetAssociations"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request syntax"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      },
      "put": {
        "summary": "Update Therapeutic Target Ranks",
        "description": "Update the ranks of multiple therapeutic targets for a given report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "requestBody": {
          "description": "An array of objects containing the ident and rank to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/therapeuticTargetRanksBulkUpdate"
                }
              }
            }
          }
        },
        "tags": [
          "Therapeutic Targets"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns updated set to true if ranks were updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "updated": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/therapeutic-targets/{Therapeutic Target}": {
      "get": {
        "summary": "Get Therapeutic Target",
        "description": "Retrieve a specific therapeutic target",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/therapeuticTarget"
          }
        ],
        "tags": [
          "Therapeutic Targets"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the specified therapeutic target",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/therapeuticTargetAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or therapeutic target not found"
          }
        }
      },
      "put": {
        "summary": "Update Therapeutic Target",
        "description": "Update the details of a therapeutic target",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/therapeuticTarget"
          }
        ],
        "requestBody": {
          "description": "New values to update specified therapeutic target",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/therapeuticTargetUpdate"
              }
            }
          }
        },
        "tags": [
          "Therapeutic Targets"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the updated therapeutic target",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/therapeuticTargetAssociations"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request syntax"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or therapeutic target not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Therapeutic Target",
        "description": "Removes the specified therapeutic target",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/therapeuticTarget"
          }
        ],
        "tags": [
          "Therapeutic Targets"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or therapeutic target not found"
          }
        }
      }
    },
    "/reports/{report}/summary/pathway-analysis": {
      "get": {
        "summary": "Get Pathway Analysis",
        "description": "Retrieve reports pathway analysis",
        "tags": [
          "Pathway Analysis"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of a reports pathway analysis",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pathwayAnalysisAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "User doesn't have permissions to access this analysis image"
          }
        }
      },
      "post": {
        "summary": "Create Pathway Analysis",
        "description": "Add a new pathway analysis to this report",
        "tags": [
          "Pathway Analysis"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "requestBody": {
          "description": "Pathway analysis data and images",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/pathwayAnalysisCreate"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the details of the created pathway analysis",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pathwayAnalysisAssociations"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request syntax"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "User doesn't have permissions to upload pathway analysis"
          },
          "409": {
            "description": "Pathway analysis already exists"
          }
        }
      },
      "put": {
        "summary": "Update Pathway Analysis",
        "description": "Update the details of a reports pathway analysis",
        "tags": [
          "Pathway Analysis"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "requestBody": {
          "description": "Template data and images",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/pathwayAnalysisUpdate"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the updated pathway analysis",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pathwayAnalysisAssociations"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request syntax"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "User doesn't have permissions to update pathway analysis"
          },
          "404": {
            "description": "No pathway analysis available to update for this report"
          }
        }
      },
      "delete": {
        "summary": "Delete Pathway Analysis",
        "description": "Removes the reports pathway analysis",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Pathway Analysis"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "User doesn't have permissions to delete pathway analysis"
          },
          "404": {
            "description": "No pathway analysis available to delete"
          }
        }
      }
    },
    "/germline-small-mutation-reports": {
      "get": {
        "summary": "Get Germline Reports",
        "description": "Retrieve all germline small mutation reports the user has access to",
        "tags": [
          "Germline Reports"
        ],
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "required": false,
            "description": "Search for germline reports by project name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "patientId",
            "in": "query",
            "required": false,
            "description": "Search for germline reports by patient id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "biopsyName",
            "in": "query",
            "required": false,
            "description": "Search for germline reports by biopsy name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "The number of reports to retrieve",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "The start of the set of reports to retrieve",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "exported",
            "in": "query",
            "required": false,
            "description": "Returns reports with exported set to true/false",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "reviewType",
            "in": "query",
            "required": false,
            "description": "Returns reports with reviews of type reviewType",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array"
                }
              ]
            }
          }
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an object containing the germline reports and the number of reports",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer"
                    },
                    "reports": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/germlineSmallMutationAssociations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "User doesn't have permissions to access germline reports"
          }
        }
      },
      "post": {
        "summary": "Add Germline Report",
        "description": "Upload a germline report and all of the report sections",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/germlineSmallMutationCreate"
              }
            }
          }
        },
        "tags": [
          "Germline Reports"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the newly created germline report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/germlineSmallMutationAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "User doesn't have permissions to upload germline reports"
          }
        }
      }
    },
    "/germline-small-mutation-reports/{germline}": {
      "get": {
        "summary": "Get Germline Report",
        "description": "Retrieve the details of the specified germline report",
        "parameters": [
          {
            "$ref": "#/components/parameters/germline"
          }
        ],
        "tags": [
          "Germline Reports"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the specified germline report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/germlineSmallMutationAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Germline report not found"
          }
        }
      },
      "put": {
        "summary": "Update Germline Report",
        "description": "Update the details of a germline report",
        "parameters": [
          {
            "$ref": "#/components/parameters/germline"
          }
        ],
        "requestBody": {
          "description": "New values to update current germline report",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/germlineSmallMutationUpdate"
              }
            }
          }
        },
        "tags": [
          "Germline Reports"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated germline report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/germlineSmallMutationAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Germline report not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Germline Report",
        "description": "Removes the specified germline report",
        "parameters": [
          {
            "$ref": "#/components/parameters/germline"
          }
        ],
        "tags": [
          "Germline Reports"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Germline report not found"
          }
        }
      }
    },
    "/germline-small-mutation-reports/{germline}/reviews": {
      "get": {
        "summary": "Get Germline Reviews",
        "description": "Retrieve all reviews for a given germline report",
        "parameters": [
          {
            "$ref": "#/components/parameters/germline"
          }
        ],
        "tags": [
          "Germline Reviews"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of reviews for the given germline report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/germlineSmallMutationReviewAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Germline report not found"
          }
        }
      }
    },
    "/germline-small-mutation-reports/{germline}/reviews/{review}": {
      "get": {
        "summary": "Get Germline Review",
        "description": "Retrieve the specified review for a given germline report",
        "parameters": [
          {
            "$ref": "#/components/parameters/germline"
          },
          {
            "$ref": "#/components/parameters/review"
          }
        ],
        "tags": [
          "Germline Reviews"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the specified review",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/germlineSmallMutationReviewAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Germline report or review not found"
          }
        }
      },
      "put": {
        "summary": "Update Germline Review",
        "description": "Update the details of a germline review",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/review"
          }
        ],
        "requestBody": {
          "description": "New values to update current germline review",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/germlineSmallMutationReviewUpdate"
              }
            }
          }
        },
        "tags": [
          "Germline Reviews"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated germline review",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/germlineSmallMutationReviewAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Germline report or review not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Germline Review",
        "description": "Removes the specified germline review",
        "parameters": [
          {
            "$ref": "#/components/parameters/germline"
          },
          {
            "$ref": "#/components/parameters/review"
          }
        ],
        "tags": [
          "Germline Reviews"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Germline report or review not found"
          }
        }
      }
    },
    "/germline-small-mutation-reports/{germline}/variants": {
      "get": {
        "summary": "Get Germline Variants",
        "description": "Retrieve all variants for a given germline report",
        "parameters": [
          {
            "$ref": "#/components/parameters/germline"
          }
        ],
        "tags": [
          "Germline Variants"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of variants for the given germline report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/germlineSmallMutationVariantAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Germline report not found"
          }
        }
      }
    },
    "/germline-small-mutation-reports/{germline}/variants/{variant}": {
      "get": {
        "summary": "Get Germline Variant",
        "description": "Retrieve the specified variant for a given germline report",
        "parameters": [
          {
            "$ref": "#/components/parameters/germline"
          },
          {
            "$ref": "#/components/parameters/variant"
          }
        ],
        "tags": [
          "Germline Variants"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the specified variant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/germlineSmallMutationVariantAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Germline report or variant not found"
          }
        }
      },
      "put": {
        "summary": "Update Germline Variant",
        "description": "Update the details of a germline variant",
        "parameters": [
          {
            "$ref": "#/components/parameters/germline"
          },
          {
            "$ref": "#/components/parameters/variant"
          }
        ],
        "requestBody": {
          "description": "New values to update current germline variant",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/germlineSmallMutationVariantUpdate"
              }
            }
          }
        },
        "tags": [
          "Germline Variants"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated germline variant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/germlineSmallMutationVariantAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Germline report or variant not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Germline Variant",
        "description": "Removes the specified germline variant",
        "parameters": [
          {
            "$ref": "#/components/parameters/germline"
          },
          {
            "$ref": "#/components/parameters/variant"
          }
        ],
        "tags": [
          "Germline Variants"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Germline report or variant not found"
          }
        }
      }
    },
    "/germline-small-mutation-reports/{germline}/users": {
      "get": {
        "summary": "Get Germline Report Users",
        "description": "Retrieve all users bound to a germline report",
        "parameters": [
          {
            "$ref": "#/components/parameters/germline"
          }
        ],
        "tags": [
          "Germline Users"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of all the users bound to a germline report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/germlineReportUserAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Germline report not found"
          }
        }
      },
      "post": {
        "summary": "Create Germline-User Binding",
        "description": "Bind a user to a germline report",
        "tags": [
          "Germline Users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/germline"
          }
        ],
        "requestBody": {
          "description": "Values for binding a user to a germline report",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/germlineReportUserCreate"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the germline report with the user now bound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/germlineSmallMutationAssociations"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request syntax"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Germline report or user not found"
          },
          "409": {
            "description": "User already bound to germline report"
          }
        }
      }
    },
    "/germline-small-mutation-reports/{germline}/users/{binding}": {
      "get": {
        "summary": "Get Germline-User Binding",
        "description": "Retrieve a specific germline-user binding",
        "parameters": [
          {
            "$ref": "#/components/parameters/germline"
          },
          {
            "$ref": "#/components/parameters/germlineReportUser"
          }
        ],
        "tags": [
          "Germline Users"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the specified germline-user binding",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/germlineReportUserAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Germline report or germline-user binding not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Germline-User Binding",
        "description": "Removes a germline-user binding",
        "parameters": [
          {
            "$ref": "#/components/parameters/germline"
          },
          {
            "$ref": "#/components/parameters/germlineReportUser"
          }
        ],
        "tags": [
          "Germline Users"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Germline report or germline-user binding not found"
          }
        }
      }
    },
    "/graphkb/{targetType}": {
      "post": {
        "summary": "Get targets by type",
        "description": "Gets targets from GraphKB (for client autocomplete)",
        "parameters": [
          {
            "$ref": "#/components/parameters/targetType"
          }
        ],
        "tags": [
          "GraphKb"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the targets from GraphKB",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/graphkbTargets"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report Not found"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailableError"
          }
        }
      }
    },
    "/graphkb/evidence-levels": {
      "get": {
        "summary": "Get evidence levels",
        "description": "Get IPR evidence levels from GraphKb",
        "parameters": [],
        "tags": [
          "GraphKb"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Response object from GraphKb API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/evidenceLevels"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report Not found"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailableError"
          }
        }
      }
    },
    "/reports/{report}/appendices": {
      "get": {
        "summary": "Get Appendix",
        "description": "Retrieve appendix data for a given report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Appendices"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a reports sample info., seqQC, and config data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/appendices"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/appendices/tcga": {
      "get": {
        "summary": "Get TCGA",
        "description": "Retrieve TCGA data for a given report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Appendices"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of objects that contain expression matrix data for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/expressionMatrix"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/copy-variants": {
      "get": {
        "summary": "Get Copy Variants",
        "description": "Retrieve all copy variants for a given report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Copy Variants"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of copy variants for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/copyVariantsAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/copy-variants/{cnv}": {
      "get": {
        "summary": "Get Copy Variant",
        "description": "Retrieve a specific copy variant from a report by ident",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/cnv"
          }
        ],
        "tags": [
          "Copy Variants"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the specified copy variant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/copyVariantsAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or copy variant not found"
          }
        }
      },
      "put": {
        "summary": "Update Copy Variant",
        "description": "Update the details of a copy variant",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/cnv"
          }
        ],
        "requestBody": {
          "description": "New values to update current copy variant",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/copyVariantsUpdate"
              }
            }
          }
        },
        "tags": [
          "Copy Variants"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the updated copy variant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/copyVariantsAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or copy variant not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Copy Variant",
        "description": "Removes the specified copy variant",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/cnv"
          }
        ],
        "tags": [
          "Copy Variants"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or copy variant not found"
          }
        }
      }
    },
    "/reports/{report}/protein-variants": {
      "get": {
        "summary": "Get Protein Variants",
        "description": "Retrieve all protein variants for a given report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Protein Variants"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of protein variants for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/proteinVariantsAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/protein-variants/{protein}": {
      "get": {
        "summary": "Get protein Variant",
        "description": "Retrieve a specific protein variant from a report by ident",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/protein"
          }
        ],
        "tags": [
          "Protein Variants"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the specified protein variant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/proteinVariantsAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or protein variant not found"
          }
        }
      },
      "put": {
        "summary": "Update Protein Variant",
        "description": "Update the details of a protein variant",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/protein"
          }
        ],
        "requestBody": {
          "description": "New values to update current protein variant",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/proteinVariantsUpdate"
              }
            }
          }
        },
        "tags": [
          "Protein Variants"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the updated protein variant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/proteinVariantsAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or protein variant not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Protein Variant",
        "description": "Removes the specified protein variant",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/protein"
          }
        ],
        "tags": [
          "Protein Variants"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or protein variant not found"
          }
        }
      }
    },
    "/reports/{report}/expression-variants": {
      "get": {
        "summary": "Get Expression Variants",
        "description": "Retrieve all expression variants for a given report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Expression Variants"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of expression variants for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/expressionVariantsAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/expression-variants/{expression}": {
      "get": {
        "summary": "Get Expression Variant",
        "description": "Retrieve a specific expression variant from the report by ident",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/expression"
          }
        ],
        "tags": [
          "Expression Variants"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the specified expression variant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/expressionVariantsAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or expression variant not found"
          }
        }
      },
      "put": {
        "summary": "Update Expression Variant",
        "description": "Update the details of an expression variant",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/expression"
          }
        ],
        "requestBody": {
          "description": "New values to update current expression variant",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/expressionVariantsUpdate"
              }
            }
          }
        },
        "tags": [
          "Expression Variants"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the updated expression variant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/expressionVariantsAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or expression variant not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Expression Variant",
        "description": "Removes the specified expression variant",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/expression"
          }
        ],
        "tags": [
          "Expression Variants"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or expression variant not found"
          }
        }
      }
    },
    "/reports/{report}/genes": {
      "get": {
        "summary": "Get all genes for a report",
        "description": "Returns all genes for a report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "description": "Filter genes by search text",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Genes"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a report's genes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/genesAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report Not found"
          }
        }
      }
    },
    "/reports/{report}/genes/{geneName}": {
      "get": {
        "summary": "Get a specific gene",
        "description": "Returns details on a specific gene",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/gene"
          }
        ],
        "tags": [
          "Genes"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single gene",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genesAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report Not found"
          }
        }
      },
      "put": {
        "summary": "Update a specific gene",
        "description": "Updates a gene and returns the updated object",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/gene"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/genesUpdate"
              }
            }
          }
        },
        "tags": [
          "Genes"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Update a single gene",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genesAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or gene not found"
          }
        }
      }
    },
    "/reports/{report}/gene-viewer/{geneName} ": {
      "get": {
        "summary": "Get gene viewer data",
        "description": "Returns gene data formatted for the front end gene viewer",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/gene"
          }
        ],
        "tags": [
          "Genes"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns gene information for all sections of a report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "kbMatches": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/kbMatchesAssociations"
                      }
                    },
                    "smallMutations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/smallMutationsAssociations"
                      }
                    },
                    "copyNumber": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/copyVariantsAssociations"
                      }
                    },
                    "expRNA": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/expressionVariantsAssociations"
                      }
                    },
                    "expDensityGraph": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/imageDataAssociations"
                      }
                    },
                    "structuralVariants": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/structuralVariantsAssociations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report Not found"
          }
        }
      }
    },
    "/reports/{report}/image": {
      "post": {
        "summary": "Add Images",
        "description": "Upload new images to report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "requestBody": {
          "description": "Images to upload (allows multiple images with different keys)",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "{key}": {
                    "type": "string",
                    "format": "binary",
                    "description": "image to upload"
                  },
                  "{key}_title": {
                    "type": "string",
                    "description": "title of image specified by key"
                  },
                  "{key}_caption": {
                    "type": "string",
                    "description": "caption of image specified by key"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Images"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "207": {
            "description": "Returns an array of objects indicating which images were uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "upload": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Malformed request syntax"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/image/{image}": {
      "get": {
        "summary": "Get Image",
        "description": "Retrieve a specific image",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/image"
          }
        ],
        "tags": [
          "Images"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the specified image",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/imageDataAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or image not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Image",
        "description": "Removes the specified image",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/image"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "Whether to do a hard delete or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "tags": [
          "Images"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "User doesn't have correct permissions to delete an image"
          },
          "404": {
            "description": "Report of image not found"
          }
        }
      }
    },
    "/reports/{report}/image/retrieve/{key}": {
      "get": {
        "summary": "Get Images by Key",
        "description": "Retrieve image data for specified keys",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/key"
          }
        ],
        "tags": [
          "Images"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of images that match key pattern",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/imageDataAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/image/subtype-plots": {
      "get": {
        "summary": "Get Subtype Plot Images",
        "description": "Retrieves all subtype plot images for report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Images"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of subtype plot images",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/imageDataAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/image/mutation-burden": {
      "get": {
        "summary": "Get Mutation Burden Images",
        "description": "Retrieve all mutation burden images for report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Images"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of mutation burden images",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/imageDataAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/image/expression-density-graphs": {
      "get": {
        "summary": "Get Expression Density Images",
        "description": "Retrieve all expression density images for report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Images"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of expression density graphs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/imageDataAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/kb-matches": {
      "get": {
        "summary": "Get KB Matches",
        "description": "Retrieve KB Matches for a given report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "name": "matchedCancer",
            "in": "query",
            "required": false,
            "description": "Filter by matchedCancer field",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "approvedTherapy",
            "in": "query",
            "required": false,
            "description": "Filter by approvedTherapy field",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "description": "Filter by category field. Comma separated field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "iprEvidenceLevel",
            "in": "query",
            "required": false,
            "description": "Filter by iprEvidenceLevel field. Comma separated field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "KB Matches"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of KB Matches for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/kbMatchesReturnObject"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report Not found"
          }
        }
      }
    },
    "/reports/{report}/kb-matches/{kbMatch}": {
      "get": {
        "summary": "Get KB Match by Ident",
        "description": "Retrieve a specific KB Match from the report by ident",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/kbMatch"
          }
        ],
        "tags": [
          "KB Matches"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the specified KB Match",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/kbMatchesReturnObject"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or KB Match not found"
          }
        }
      },
      "delete": {
        "summary": "Delete KB Match",
        "description": "Removes the specified KB Match",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/kbMatch"
          }
        ],
        "tags": [
          "KB Matches"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or KB Match not found"
          }
        }
      }
    },
    "/reports/{report}/mavis": {
      "get": {
        "summary": "Get Mavis Summaries",
        "description": "Retrieve all mavis summaries for a given report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Mavis"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all mavis summaries for a report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/mavisAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/mutation-signatures": {
      "get": {
        "summary": "Get mutation signatures",
        "description": "Returns all mutation signatures for a given report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Mutation Signatures"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of mutation signatures",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/mutationSignatureAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report Not found"
          }
        }
      }
    },
    "/reports/{report}/mutation-signatures/{mutationSignature}": {
      "get": {
        "summary": "Get a specific mutation signature",
        "description": "Returns a specified mutation signature",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/mutationSignature"
          }
        ],
        "tags": [
          "Mutation Signatures"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the specified mutation signature",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mutationSignatureAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or signature not found"
          }
        }
      },
      "put": {
        "summary": "Update a mutation signature",
        "description": "Updates and returns the specified mutation signature",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/mutationSignature"
          }
        ],
        "requestBody": {
          "description": "The mutation signature to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/mutationSignatureUpdate"
              }
            }
          }
        },
        "tags": [
          "Mutation Signatures"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated mutation signature",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mutationSignatureAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or signature not found"
          }
        }
      }
    },
    "/reports/{report}/presentation/discussion": {
      "get": {
        "summary": "Get a list of discussions for a specific report",
        "description": "Return an array of discussions from a report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Presentation"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Get the array of discussions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/presentationDiscussionAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      },
      "post": {
        "summary": "Create a discussion for a specific report",
        "description": "Return the created discussion for a report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "requestBody": {
          "description": "The discussion to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/presentationDiscussionCreate"
              }
            }
          }
        },
        "tags": [
          "Presentation"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "The created discussion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/presentationDiscussionAssociations"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input was provided"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/presentation/discussion/{discussion}": {
      "get": {
        "summary": "Get a single discussion for a specific report",
        "description": "Return a discussion object from a report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/discussion"
          }
        ],
        "tags": [
          "Presentation"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single discussion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/presentationDiscussionAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found or Discussion not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a single discussion for a specific report",
        "description": "Return no content if successful",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/discussion"
          }
        ],
        "tags": [
          "Presentation"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found or Discussion not found"
          }
        }
      },
      "put": {
        "summary": "Update a discussion for a specific report",
        "description": "Return the updated discussion for a report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/discussion"
          }
        ],
        "requestBody": {
          "description": "The discussion to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/presentationDiscussionUpdate"
              }
            }
          }
        },
        "tags": [
          "Presentation"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "The updated discussion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/presentationDiscussionAssociations"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input was provided"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/presentation/slide": {
      "get": {
        "summary": "Get a list of slides from a report",
        "description": "Return an array of slide objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Presentation"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Array of slides",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/presentationSlidesAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      },
      "post": {
        "summary": "Create a slide for a report",
        "description": "Return the created slide object",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Presentation"
        ],
        "requestBody": {
          "description": "Slide object and name",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/presentationSlidesCreate"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Slide object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/presentationSlidesAssociations"
                }
              }
            }
          },
          "400": {
            "description": "Input not valid"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/presentation/slide/{slide}": {
      "get": {
        "summary": "Get a single slide from a report",
        "description": "Return a slide object",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/slide"
          }
        ],
        "tags": [
          "Presentation"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Slide object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/presentationSlidesAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found or Slide not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a single slide for a specific report",
        "description": "Return no content if successful",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/slide"
          }
        ],
        "tags": [
          "Presentation"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report Not found or Discussion not found"
          }
        }
      }
    },
    "/reports/{report}/sample-info": {
      "get": {
        "summary": "Get a list of sample-info for a specific report",
        "description": "Return an array of sample-info from a report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Sample Info"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Get the array of sample-info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/reportSampleInfoAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      },
      "post": {
        "summary": "Create a sample-info for a specific report",
        "description": "Return the created sample-info for a report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "requestBody": {
          "description": "The sample-info to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reportSampleInfoCreate"
              }
            }
          }
        },
        "tags": [
          "Sample Info"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "The created sample-info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reportSampleInfoAssociations"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input was provided"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/sample-info/{sampleInfo}": {
      "get": {
        "summary": "Get a single sample-info for a specific report",
        "description": "Return a sample-info object from a report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/sampleInfo"
          }
        ],
        "tags": [
          "Sample Info"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single sample-info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reportSampleInfoAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found or sample-info not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a single sample-info for a specific report",
        "description": "Return no content if successful",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/sampleInfo"
          }
        ],
        "tags": [
          "Sample Info"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found or sample-info not found"
          }
        }
      },
      "put": {
        "summary": "Update a sample-info for a specific report",
        "description": "Return the updated sample-info for a report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/sampleInfo"
          }
        ],
        "requestBody": {
          "description": "The sample-info to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reportSampleInfoUpdate"
              }
            }
          }
        },
        "tags": [
          "Sample Info"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "The updated sample-info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reportSampleInfoAssociations"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input was provided"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/probe-results": {
      "get": {
        "summary": "Get Probe Results",
        "description": "Retrieve all probe results for a given report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Probe Results"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of probe results for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/probeResultsAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/probe-results/{target}": {
      "get": {
        "summary": "Get Probe Result",
        "description": "Retrieve the specified probe result for a given report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/target"
          }
        ],
        "tags": [
          "Probe Results"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the specified probe result for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/probeResultsAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      },
      "put": {
        "summary": "Update Probe Result",
        "description": "Update the details of the probe result",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/target"
          }
        ],
        "requestBody": {
          "description": "New values to update probe result",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/probeResultsUpdate"
              }
            }
          }
        },
        "tags": [
          "Probe Results"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated probe result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/probeResultsAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or probe result not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Probe Result",
        "description": "Remove the specified probe result",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/target"
          }
        ],
        "tags": [
          "Probe Results"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or probe results not found"
          }
        }
      }
    },
    "/reports/{report}/probe-test-information": {
      "get": {
        "summary": "Get Probe Test Information",
        "description": "Retrieve probe test information for a given report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Probe Test Information"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the probe test information for a report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/probeTestInformationAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/signatures": {
      "get": {
        "summary": "Get Signatures",
        "description": "Retrieve signatures for a given report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Signatures"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the signatures for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/signaturesAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/signatures/sign/{role}": {
      "put": {
        "summary": "Add Signature",
        "description": "Sign a report for the specified role",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/role"
          }
        ],
        "tags": [
          "Signatures"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated signatures",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/signaturesAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or role not found"
          }
        }
      }
    },
    "/variant-text": {
      "get": {
        "summary": "Get variant text",
        "description": "Retrieve all variant text that you have access to",
        "tags": [
          "variant text"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of variant text",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/variantTextAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Insufficient access to get Variant Text"
          }
        }
      },
      "post": {
        "summary": "Add Variant Text",
        "description": "Upload a Variant Text",
        "tags": [
          "variant text"
        ],
        "parameters": [],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/variantTextCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns an object containing a message and the ident of the Variant Text",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "ident": {
                      "$ref": "#/components/schemas/ident"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Malformed request syntax"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/variant-text/{variantText}": {
      "get": {
        "summary": "Get Variant Text",
        "description": "Retrieve a Variant Text",
        "parameters": [
          {
            "$ref": "#/components/parameters/variantText"
          }
        ],
        "tags": [
          "variant text"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the specified Variant Text",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/variantTextAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Variant Text not found"
          }
        }
      },
      "put": {
        "summary": "Update Variant Text",
        "description": "Update the details of a Variant Text",
        "tags": [
          "variant text"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/variantText"
          }
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/variantTextUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the details of the updated Variant Text",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/variantTextAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Variant Text not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Variant Text",
        "description": "Removes the specified Variant Text",
        "parameters": [
          {
            "$ref": "#/components/parameters/variantText"
          }
        ],
        "tags": [
          "variant text"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Variant Text not found"
          }
        }
      }
    },
    "/reports/{report}/signatures/revoke/{role}": {
      "put": {
        "summary": "Remove Signature",
        "description": "Remove the signature from the report with the specified role",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/role"
          }
        ],
        "tags": [
          "Signatures"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated signatures",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/signaturesAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report, role or signatures not found"
          }
        }
      }
    },
    "/reports/{report}/signatures/earliest-signoff": {
      "get": {
        "summary": "Get Earliest Signoff",
        "description": "Retreives the record with the earliest date that the report was signed by both the author and reviewer",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Signatures"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the earliest signed off record",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/earliestSignOff"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or signature not found"
          }
        }
      }
    },
    "/reports/{report}/small-mutations": {
      "get": {
        "summary": "Get Small Mutations",
        "description": "Retrieve all small mutations for a given report",
        "tags": [
          "Small Mutations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of somatic small mutations for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/smallMutationsAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/small-mutations/{mutation}": {
      "get": {
        "summary": "Get Small Mutation",
        "description": "Retrieves a small mutation from the report by ident",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/mutation"
          }
        ],
        "tags": [
          "Small Mutations"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the specified small mutation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/smallMutationsAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or small mutation not found"
          }
        }
      },
      "put": {
        "summary": "Update Small Mutation",
        "description": "Update the details of a small mutation",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/mutation"
          }
        ],
        "requestBody": {
          "description": "New values to update current small mutation",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/smallMutationsUpdate"
              }
            }
          }
        },
        "tags": [
          "Small Mutations"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the updated small mutation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/smallMutationsAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or small mutation not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Small Mutation",
        "description": "Removes the specified small mutation",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/mutation"
          }
        ],
        "tags": [
          "Small Mutations"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or small mutation not found"
          }
        }
      }
    },
    "/reports/{report}/structural-variants": {
      "get": {
        "summary": "Get Structural Variants",
        "description": "Retrieve all structural variants for a given report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Structural Variants"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of structural variants for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/structuralVariantsAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/structural-variants/{structuralVariant}": {
      "get": {
        "summary": "Get Structural Variant",
        "description": "Retrieves a structural variant from the report by ident",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/structuralVariant"
          }
        ],
        "tags": [
          "Structural Variants"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the specified structural variant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/structuralVariantsAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or structural variant not found"
          }
        }
      },
      "put": {
        "summary": "Update Structural Variant",
        "description": "Update the details of a structural variant",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/structuralVariant"
          }
        ],
        "requestBody": {
          "description": "New values to update current structural variant",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/structuralVariantsUpdate"
              }
            }
          }
        },
        "tags": [
          "Structural Variants"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the updated structural variant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/structuralVariantsAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or structural variant not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Structural Variant",
        "description": "Removes the specified structural variant",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/structuralVariant"
          }
        ],
        "tags": [
          "Structural Variants"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or structural variant not found"
          }
        }
      }
    },
    "/reports/{report}/summary/analyst-comments": {
      "get": {
        "summary": "Get an Analyst Comment associated with a given report",
        "description": "Return the Analyst Comment associated with this report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Analyst Comments"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Get Analyst Comment associated with an analysis report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/analystComments"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report Not found"
          }
        }
      },
      "delete": {
        "summary": "Delete an Analyst Comment associated with a given report",
        "description": "Returns no content if comment was deleted successfully",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Analyst Comments"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report Not found"
          }
        }
      },
      "put": {
        "summary": "Update an Analyst Comment associated with a given report",
        "description": "Return the updated Analyst Comment associated with this report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "requestBody": {
          "description": "Analyst Comment object to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/analystCommentsUpdate"
              }
            }
          }
        },
        "tags": [
          "Analyst Comments"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "The updated Analyst Comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/analystComments"
                }
              }
            }
          },
          "400": {
            "description": "Input is not valid"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report Not found"
          }
        }
      }
    },
    "/reports/{report}/comparators": {
      "get": {
        "summary": "Get Comparators",
        "description": "Retrieve comparators for a given report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Comparators"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of comparators for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/comparatorsAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report Not found"
          }
        }
      }
    },
    "/reports/{report}/msi": {
      "get": {
        "summary": "Get MSI Data",
        "description": "Retrieve MSI data for a given report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "MSI"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of all MSI data for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/msiAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      },
      "post": {
        "summary": "Create MSI Entry",
        "description": "Add a new MSI entry to this report",
        "tags": [
          "MSI"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "requestBody": {
          "description": "Values for creating a new MSI entry",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/msiCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created MSI entry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msiAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/msi/{msi}": {
      "get": {
        "summary": "Get MSI Entry",
        "description": "Retrieve a specific MSI Entry",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/msi"
          }
        ],
        "tags": [
          "MSI"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the specified MSI entry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msiAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or MSI not found"
          }
        }
      },
      "put": {
        "summary": "Update MSI Entry",
        "description": "Update the details of a MSI entry",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/msi"
          }
        ],
        "requestBody": {
          "description": "New values to update specified MSI entry",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/msiUpdate"
              }
            }
          }
        },
        "tags": [
          "MSI"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the updated MSI entry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msiAssociations"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request syntax"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or MSI not found"
          }
        }
      },
      "delete": {
        "summary": "Delete MSI Entry",
        "description": "Removes the specified MSI entry",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/msi"
          }
        ],
        "tags": [
          "MSI"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or MSI not found"
          }
        }
      }
    },
    "/reports/{report}/immune-cell-types": {
      "get": {
        "summary": "Get Immune Cell Types Data",
        "description": "Retrieve Immune Cell Types data for a given report",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "tags": [
          "Immune Cell Types"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of all Immune Cell Types data for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/immuneCellTypesAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      },
      "post": {
        "summary": "Create Immune Cell Types Entry",
        "description": "Add a new Immune Cell Types entry to this report",
        "tags": [
          "Immune Cell Types"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          }
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "requestBody": {
          "description": "Values for creating a new Immune Cell Types entry",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/immuneCellTypesCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created Immune Cell Types entry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/immuneCellTypesAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report not found"
          }
        }
      }
    },
    "/reports/{report}/immune-cell-types/{immuneCellTypes}": {
      "get": {
        "summary": "Get Immune Cell Types Entry",
        "description": "Retrieve a specific Immune Cell Types Entry",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/immuneCellTypes"
          }
        ],
        "tags": [
          "Immune Cell Types"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the specified Immune Cell Types entry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/immuneCellTypesAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or Immune Cell Types not found"
          }
        }
      },
      "put": {
        "summary": "Update Immune Cell Types Entry",
        "description": "Update the details of a Immune Cell Types entry",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/immuneCellTypes"
          }
        ],
        "requestBody": {
          "description": "New values to update specified Immune Cell Types entry",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/immuneCellTypesUpdate"
              }
            }
          }
        },
        "tags": [
          "Immune Cell Types"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the updated Immune Cell Types entry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/immuneCellTypesAssociations"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request syntax"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or Immune Cell Types not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Immune Cell Types Entry",
        "description": "Removes the specified Immune Cell Types entry",
        "parameters": [
          {
            "$ref": "#/components/parameters/report"
          },
          {
            "$ref": "#/components/parameters/immuneCellTypes"
          }
        ],
        "tags": [
          "Immune Cell Types"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Report or Immune Cell Types not found"
          }
        }
      }
    },
    "/templates": {
      "get": {
        "summary": "Get Templates",
        "description": "Retrieve all templates",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Filter templates by name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "query",
            "required": false,
            "description": "Filter templates by organization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Templates"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of all templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/templateAssociations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "summary": "Create Template",
        "description": "Upload a new template",
        "parameters": [],
        "requestBody": {
          "description": "Template data and images",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/templateCreate"
              }
            }
          }
        },
        "tags": [
          "Templates"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the created template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/templateAssociations"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request syntax"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/templates/{template}": {
      "get": {
        "summary": "Get Template",
        "description": "Retrieve a specific template",
        "parameters": [
          {
            "$ref": "#/components/parameters/template"
          }
        ],
        "tags": [
          "Templates"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the specified template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/templateAssociations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Template not found"
          }
        }
      },
      "put": {
        "summary": "Update Template",
        "description": "Update the details of a template",
        "parameters": [
          {
            "$ref": "#/components/parameters/template"
          }
        ],
        "requestBody": {
          "description": "Template data and images",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/templateUpdate"
              }
            }
          }
        },
        "tags": [
          "Templates"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the updated template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/templateAssociations"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request syntax"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Template not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Template",
        "description": "Removes the specified template",
        "parameters": [
          {
            "$ref": "#/components/parameters/template"
          }
        ],
        "tags": [
          "Templates"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Template not found"
          }
        }
      }
    },
    "/templates/{template}/appendix": {
      "get": {
        "summary": "Get Template Appendix",
        "description": "Retrieve a templates appendix",
        "parameters": [
          {
            "$ref": "#/components/parameters/template"
          }
        ],
        "tags": [
          "Template Appendix"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of a templates appendix",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/templateAppendix"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Template or appendix not found"
          }
        }
      },
      "post": {
        "summary": "Create Template Appendix",
        "description": "Upload a new template appendix",
        "parameters": [],
        "requestBody": {
          "description": "Template appendix data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/templateAppendixCreate"
              }
            }
          }
        },
        "tags": [
          "Template Appendix"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the created template appendix",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/templateAppendix"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request syntax"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "409": {
            "description": "An appendix already exists for this template"
          }
        }
      },
      "put": {
        "summary": "Update Template Appendix",
        "description": "Update the details of a templates appendix",
        "parameters": [
          {
            "$ref": "#/components/parameters/template"
          }
        ],
        "requestBody": {
          "description": "Template appendix data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/templateAppendixUpdate"
              }
            }
          }
        },
        "tags": [
          "Template Appendix"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details of the updated template appendix",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/templateAppendix"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request syntax"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Template or appendix not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Template Appendix",
        "description": "Removes the specified templates appendix",
        "parameters": [
          {
            "$ref": "#/components/parameters/template"
          }
        ],
        "tags": [
          "Template Appendix"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Template or appendix not found"
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "components": {
    "parameters": {
      "project": {
        "name": "project",
        "in": "path",
        "required": true,
        "description": "Project ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "report": {
        "name": "report",
        "in": "path",
        "required": true,
        "description": "Analysis report ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "variantText": {
        "name": "variantText",
        "in": "path",
        "required": true,
        "description": "Variant Text report ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "germline": {
        "name": "germline",
        "in": "path",
        "required": true,
        "description": "Germline report ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "targetType": {
        "name": "Target Type",
        "in": "path",
        "required": true,
        "description": "Target type, one of: variant, therapy, evidenceLevel or context",
        "schema": {
          "type": "string"
        }
      },
      "therapeuticTarget": {
        "name": "therapeutic target",
        "in": "path",
        "required": true,
        "description": "therapeutic target ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "review": {
        "name": "review",
        "in": "path",
        "required": true,
        "description": "Germline review ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "variant": {
        "name": "variant",
        "in": "path",
        "required": true,
        "description": "Germline variant ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "cnv": {
        "name": "Copy-Number Variant",
        "in": "path",
        "required": true,
        "description": "Copy number variant ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "protein": {
        "name": "Protein Variant",
        "in": "path",
        "required": true,
        "description": "Protein variant ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "analysis": {
        "name": "analysis",
        "in": "path",
        "required": true,
        "description": "the analysis (or biopsy) ID",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "discussion": {
        "name": "discussion",
        "in": "path",
        "required": true,
        "description": "discussion ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "sampleInfo": {
        "name": "sampleInfo",
        "in": "path",
        "required": true,
        "description": "sample-info ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "slide": {
        "name": "slide",
        "in": "path",
        "required": true,
        "description": "slide ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "kbMatch": {
        "name": "kbMatch",
        "in": "path",
        "required": true,
        "description": "KB Match ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "burden": {
        "name": "burden",
        "in": "path",
        "required": true,
        "description": "mutation burden ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "tmbur": {
        "name": "tmbur",
        "in": "path",
        "required": true,
        "description": "tmbur mutation burden ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "gene": {
        "name": "gene",
        "in": "path",
        "required": true,
        "description": "Gene name",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "mutationSignature": {
        "name": "mutationSignature",
        "in": "path",
        "required": true,
        "description": "Mutation signature ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "mutation": {
        "name": "mutation",
        "in": "path",
        "required": true,
        "description": "small mutation ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "expression": {
        "name": "expression",
        "in": "path",
        "required": true,
        "description": "expression variant ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "structuralVariant": {
        "name": "structural variant",
        "in": "path",
        "required": true,
        "description": "structural variant ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "key": {
        "name": "key",
        "in": "path",
        "required": true,
        "description": "comma separated list of image keys (e.g. loh.3,loh.4)",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "target": {
        "name": "target",
        "in": "path",
        "required": true,
        "description": "probe result ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "role": {
        "name": "role",
        "in": "path",
        "required": true,
        "description": "Role of signee",
        "schema": {
          "type": "string",
          "enum": [
            "author",
            "reviewer",
            "creator"
          ]
        }
      },
      "msi": {
        "name": "msi",
        "in": "path",
        "required": true,
        "description": "MSI ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "immuneCellTypes": {
        "name": "immuneCellTypes",
        "in": "path",
        "required": true,
        "description": "Immune Cell Types ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "template": {
        "name": "template",
        "in": "path",
        "required": true,
        "description": "template ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "image": {
        "name": "image",
        "in": "path",
        "required": true,
        "description": "image ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "alteration": {
        "name": "alteration",
        "in": "path",
        "required": true,
        "description": "Identified genomic alteration ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "reportUser": {
        "name": "reportUser",
        "in": "path",
        "required": true,
        "description": "report-user binding ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      },
      "germlineReportUser": {
        "name": "germlineReportUser",
        "in": "path",
        "required": true,
        "description": "germline-user binding ident",
        "schema": {
          "type": "string",
          "format": "UUIDv4"
        }
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "schemas": {
      "ident": {
        "type": "string",
        "format": "UUIDv4",
        "example": "8cd64045-7e68-4455-bcc2-e750c4372974",
        "description": "Randomly generated public unique ID"
      },
      "datetime": {
        "type": "string",
        "format": "date-time",
        "example": "2017-03-30T19:04:13.354Z",
        "description": "YYYY-MM-DDTZHH:ii:ss timestamp"
      },
      "reportIdent": {
        "type": "string",
        "example": "JY41T",
        "description": "Randomly generated unique report ID"
      },
      "ACLDenied": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "example": "You are not authorized to view this resource."
          }
        }
      },
      "kbMatchesReturnObject": {
        "allOf": [
          {
            "$ref": "#/components/schemas/kbMatchesAssociations"
          },
          {
            "type": "object",
            "properties": {
              "reviewStatus": {
                "description": "Current review status of this record in GraphKb",
                "type": "string"
              }
            }
          }
        ]
      },
      "projectReports": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "ident": {
              "type": "string"
            },
            "patientId": {
              "type": "string"
            },
            "alternateIdentifier": {
              "type": "string"
            },
            "createdAt": {
              "type": "string"
            },
            "updatedAt": {
              "type": "string"
            }
          }
        }
      },
      "expressionMatrix": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "Full Name": {
              "type": "string"
            },
            "Code Name": {
              "type": "string"
            },
            "Data Source": {
              "type": "string"
            },
            "Tumour Count": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ],
              "example": 179
            },
            "Normal Count": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ],
              "example": 0
            }
          }
        }
      },
      "evidenceLevels": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "properties": {
              "records": {
                "type": "integer"
              }
            }
          },
          "result": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "@class": {
                  "type": "string"
                },
                "@rid": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "displayName": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "graphkbTargets": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "properties": {
              "records": {
                "type": "integer"
              }
            }
          },
          "result": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "@class": {
                  "type": "string"
                },
                "@rid": {
                  "type": "string"
                },
                "displayName": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "userProject": {},
      "userGroupMember": {}
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Authentication information is missing or invalid",
        "headers": {
          "WWW_Authenticate": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "ServiceUnavailableError": {
        "description": "External service is unavailable"
      }
    }
  },
  "security": [
    {
      "basicAuth": []
    }
  ]
}